{
  "name": "hoodie-worker-shares",
  "version": "0.0.4",
  "description": "handles sharing of objects between users or publicly",
  "author": {
    "name": "Hoodie"
  },
  "main": "lib/Worker.js",
  "dependencies": {
    "hoodie-worker": "git://github.com/hoodiehq/hoodie-worker.git"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha",
    "start": "node index.js"
  },
  "readme": "# Hoodie Shares Worker\n\nThis worker handles sharing of objects between users or publicly.\n\nTo start, this needs the following environment variables set:\n\n    $ export HOODIE_SERVER=http://example.org\n    $ export HOODIE_ADMIN_USER=couch_admin_username\n    $ export HOODIE_ADMIN_PASS=couch_admin_pass\n\nTo start, run:\n\n    $ node index.js\n\n\n## Requirements\n\nAs of now, there is no \"worker installation routine yet\". But as soon as we have them,\nthe routine for the Shares Worker has to add two things to the Couch\n\n1. Create a \"skeleton/share\" database, having a `_design/share_filters`  doc and a \n   `_design/write_access` doc (see stuff/_design:filters.json and stuff/_design:write_access.json)\n2. Adding a \"_design/shares\" doc to _replicators database (see stuff/_design:cancel_replications)\n3. _users database needs a view to map usernames by owner hashes (see stuff/_design:user_views)\n\n\n## What happens behind the curtain\n\nAn additional `$shares` database gets created for every user, in the form of `user/hash567/$shares`.\nObjects do not get replicated directly from the user datbase (`user/hash567`) as the user has the\noption to share only certain attributes of an object.\n\nThe worker follows all user databases and the `$shares` counterparts. If the latter do not exist yet,\nthey get created.\n\nHere's an example (simplified) `$share` object created by a user:\n\n```json\n{\n  \"_id\"  : \"$share/uuid567\",\n  \"_ref\" : \"1-bl2xa#1346886508617\",\n  \"type\" : \"$share\"\n}\n```\n\nThe worker picks it up, creates a database \"share/uuid567\" and a continuous replication from user's `$shares` database.\nIt also sets the `$state` attribute to \"active\", so that the frontend client can inform the user that the sharing has been started.\n\nWhenever the user adds an object to the sharing, the share id will be added to the $shares attribute (which gets created if not present yet.)\n\n```json\n{\n  \"_id\"     : \"todo/abc4567\",\n  \"type\"    : \"todo\",\n  \"name\"    : \"Remeber the mild\",\n  \"owner\"   : \"joe@example.com\",\n  \"$shares\" : {\n    \"uuid567\": true\n  }\n}\n```\n\nThe worker will remove the $shares attribute and copy it over to the user's $shares database.\nBesides `true`, the value can also be an array of attributes:\n\n```json\n{\n  \"_id\"     : \"todo/abc4567\",\n  \"type\"    : \"todo\",\n  \"name\"    : \"Remeber the mild\",\n  \"owner\"   : \"joe@example.com\",\n  \"$shares\" : {\n    \"uuid567\": [\"name\"]\n  }\n}\n```\n\nIn the example above, only the `name` attribute will be copied over, the `owner` attribute\nwill not be shared. \n\nWhenever the user removes an object from a sharing, the value will be set to false, so that\nthe worker can react on it and remove the object from the $shares database. Once the object\nhas been removed, the share id will me remove from the `$shares` hash of the object.\n\n\n## To be done\n\nThe current implementation ignores share settings and is not bidirectional yet.\n\n* the `access` setting  \n  the access setting defines who can read and/or write to the sharing. Default\n  value is false, meaning only the creator has access. `true` means the sharing\n  is public. More granular settings are possible as well:  \n\n  `{read: true}` public sharing, but read only  \n  `{read: [\"user1\", \"user2\"]}` private sharing, only user1 & user2 have read access  \n  `{write: [\"user1\", \"user2\"]}` private sharing, user1 & user2 have read & write access  \n  `{read: true, write: [\"user1\"]}` private sharing, but only user1 has write access  \n\n  depending on the access setting, a _design doc has to be created that prevents\n  unauthorized users to make changes to the shared objects. And if the share allows\n  changes, they need to be replicated to users $shares database and the changes need\n  to be incorporated into the \"real objects\".\n* the `password` setting  \n  When the sharing is public and a password is set, the objects can be only accessed\n  with the password. Users that are liste",
  "readmeFilename": "README.md",
  "_id": "hoodie-worker-shares@0.0.4",
  "dist": {
    "shasum": "3011e7449061f9c1bf62a09222a016b1ddc08259"
  },
  "_resolved": "git://github.com/hoodiehq/worker-shares.git#5b7f60939c205f9191d699d697338d0f298f8ade",
  "_from": "worker-shares@git://github.com/hoodiehq/worker-shares.git"
}
